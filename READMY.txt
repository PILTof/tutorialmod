Как создать своего моба в версии 1.17-1.18?


    Пошаоговая инструкция:
1. Первое что нужно сделать -
        создать Init класс.
        В нём мы регистрируем объект методами DeferredRegister и RegistryObject.

        ПРИМЕР:
          public class EntityInit {

              private EntityInit() {}

              public static final DeferredRegister<EntityType<?>> ENTITIES = DeferredRegister.create(ForgeRegistries.ENTITIES,
                      tutorialmod.MOD_ID);

              public static final RegistryObject<EntityType<ExampleEntity>> EXAMPLE_ENTITY = ENTITIES.register("example_entity",
                      () -> EntityType.Builder.of(ExampleEntity::new, MobCategory.CREATURE).sized(2f,2f)                           //обязательно указать sized
                              .build(new ResourceLocation(tutorialmod.MOD_ID, "example_entity").toString()));
          }
2. Второе -
        Созать класс самого моба. (ExampleEntity в моем случае)
        Я располагаю его в common(серверная часть).entity
        В нём мы пропишем конструктор, AI (registerGoals), атрибуты и реализуем метод (в моем случае AgeableMob).

            Код:
            public class ExampleEntity extends Animal {

                public ExampleEntity(EntityType<? extends Animal> entityType, Level level) {
                    super(entityType, level);
                }

                @Override
                protected void registerGoals() {
                    this.goalSelector.addGoal(0, new FloatGoal(this));
                    this.goalSelector.addGoal(1, new PanicGoal(this, 1.25D));
                    this.goalSelector.addGoal(3, new BreedGoal(this, 1.0D));
                    this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, Ingredient.of(ItemInit.TITANIUM_INGOT.get()), false));
                    this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.1D));
                    this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 1.0D));
                    this.goalSelector.addGoal(7, new LookAtPlayerGoal(this, Player.class, 6.0F));
                    this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
                }

                public static AttributeSupplier.Builder createAttributes() {
                    return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 30.0D).add(Attributes.MOVEMENT_SPEED, 0.24D);
                }

                @Override
                public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob parent) {
                    return EntityInit.EXAMPLE_ENTITY.get().create(level);
                }

            }

3. Теперь нужно использовать регистрацию в main файле (tutorialmod)

        EntityInit.ENTITIES.register(eventBus);

4. Создаём регистрацию event (registerAttributes) для нашего моба (ExampleEntity)
            ОБЯЗАТЕЛЬНО.

            Код:
            @Mod.EventBusSubscriber(modid = tutorialmod.MOD_ID, bus = Bus.MOD)
            public class CommonModEvent {
                @SubscribeEvent
                public static void registerAttributes(EntityAttributeCreationEvent event) {
                    event.put(EntityInit.EXAMPLE_ENTITY.get(), ExampleEntity.createAttributes().build());

                }
            }

5. Создаем Renderer класс для моба.
        Помещаю его в client.renderer
        В нем создается переменная в которой указываем ResourceLocation (где находятся текстуры)
        Создаем конструктор ExampleEntityRenderer в котором запекаем LAYER_LOCATION из model файла который создадим позже.

            Код:
            public class ExampleEntityRenderer<Type extends ExampleEntity> extends MobRenderer<Type, ExampleEntityModel<Type>> {

                    private static final ResourceLocation TEXTURE = new ResourceLocation(tutorialmod.MOD_ID, "textures/entities/example_entity.png");

                    public ExampleEntityRenderer(EntityRendererProvider.Context context) {
                        super(context,
                                new ExampleEntityModel<>(context.bakeLayer(ExampleEntityModel.LAYER_LOCATION)), 0.5f);
                    }

                    @Override
                    public ResourceLocation getTextureLocation(Type entity) {
                        return TEXTURE;
                    }
                }

6. В блокбенче создаем модель моба и экспортируем её в java файл.
        Я закидываю её в client.renderer.model
        В нём нужно заменить через Refractor параметры в брекетах <T> на <Type...>


            Код:
            package net.pilto.tutorialmod.client.renderer.model;

            import com.mojang.blaze3d.vertex.PoseStack;
            import com.mojang.blaze3d.vertex.VertexConsumer;
            import net.minecraft.client.model.EntityModel;
            import net.minecraft.client.model.geom.ModelLayerLocation;
            import net.minecraft.client.model.geom.ModelPart;
            import net.minecraft.client.model.geom.PartPose;
            import net.minecraft.client.model.geom.builders.*;
            import net.minecraft.resources.ResourceLocation;
            import net.minecraft.world.entity.Entity;
            import net.pilto.tutorialmod.common.entity.ExampleEntity;
            import net.pilto.tutorialmod.tutorialmod;

            public class ExampleEntityModel<Type extends ExampleEntity> extends EntityModel<Type> {
            	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(
            			new ResourceLocation(tutorialmod.MOD_ID, "exampleentitymodel"), "main");
            	private final ModelPart body;

            	public ExampleEntityModel(ModelPart root) {
            		this.body = root.getChild("body");
            	}

            	public static LayerDefinition createBodyLayer() {
            		MeshDefinition meshdefinition = new MeshDefinition();
            		PartDefinition partdefinition = meshdefinition.getRoot();

            		PartDefinition body = partdefinition.addOrReplaceChild("body", CubeListBuilder.create().texOffs(0, 16).addBox(-4.0F, -24.0F, -2.0F, 8.0F, 12.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 24.0F, 0.0F));

            		body.addOrReplaceChild("head", CubeListBuilder.create().texOffs(1, 2).addBox(-3.5F, -31.0F, -3.5F, 7.0F, 7.0F, 7.0F, new CubeDeformation(0.0F))
            		.texOffs(32, 0).addBox(-4.0F, -31.5F, -4.0F, 8.0F, 8.0F, 8.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		PartDefinition legs = body.addOrReplaceChild("legs", CubeListBuilder.create(), PartPose.offset(0.0F, 0.0F, 0.0F));

            		PartDefinition right_leg = legs.addOrReplaceChild("right_leg", CubeListBuilder.create().texOffs(0, 16).addBox(-4.0F, -12.0F, -2.0F, 4.0F, 7.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		right_leg.addOrReplaceChild("right_leg2", CubeListBuilder.create().texOffs(0, 23).addBox(-4.0F, -5.0F, -2.0F, 4.0F, 5.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		PartDefinition left_leg = legs.addOrReplaceChild("left_leg", CubeListBuilder.create().texOffs(0, 16).addBox(0.0F, -12.0F, -2.0F, 4.0F, 7.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		left_leg.addOrReplaceChild("left_leg2", CubeListBuilder.create().texOffs(0, 23).addBox(0.0F, -5.0F, -2.0F, 4.0F, 5.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		PartDefinition arms = body.addOrReplaceChild("arms", CubeListBuilder.create(), PartPose.offset(0.0F, 0.0F, 0.0F));

            		PartDefinition left_arm = arms.addOrReplaceChild("left_arm", CubeListBuilder.create().texOffs(40, 16).addBox(4.0F, -24.0F, -2.0F, 4.0F, 5.0F, 4.0F, new CubeDeformation(0.0F))
            		.texOffs(40, 22).addBox(4.0F, -19.0F, -2.0F, 3.0F, 2.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		PartDefinition left_arm2 = left_arm.addOrReplaceChild("left_arm2", CubeListBuilder.create().texOffs(40, 23).addBox(4.0F, -17.0F, -2.0F, 4.0F, 5.0F, 4.0F, new CubeDeformation(0.0F))
            		.texOffs(40, 25).addBox(4.0F, -12.0F, -2.0F, 3.0F, 3.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		PartDefinition right_arm = arms.addOrReplaceChild("right_arm", CubeListBuilder.create().texOffs(40, 16).mirror().addBox(-8.0F, -24.0F, -2.0F, 4.0F, 5.0F, 4.0F, new CubeDeformation(0.0F)).mirror(false)
            		.texOffs(40, 22).addBox(-7.0F, -19.0F, -2.0F, 3.0F, 2.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		PartDefinition right_arm2 = right_arm.addOrReplaceChild("right_arm2", CubeListBuilder.create().texOffs(40, 25).addBox(-7.0F, -12.0F, -2.0F, 3.0F, 3.0F, 4.0F, new CubeDeformation(0.0F))
            		.texOffs(40, 23).addBox(-8.0F, -17.0F, -2.0F, 4.0F, 5.0F, 4.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 0.0F, 0.0F));

            		return LayerDefinition.create(meshdefinition, 64, 64);
            	}

            	@Override
            	public void setupAnim(Type entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
            	}

            	@Override
            	public void renderToBuffer(PoseStack poseStack, VertexConsumer buffer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
            		this.body.render(poseStack, buffer, packedLight, packedOverlay);
            	}
            }

7. Содаём ClientModEvents
       В нём мы регистрируем рендер для клиента, где нужно будет создать два @SubscribeModEvent в которых
       указать следущее:

            Код:
            @Mod.EventBusSubscriber(modid = tutorialmod.MOD_ID, bus = Bus.MOD, value = Dist.CLIENT)
            public class ClientModEvents {

                private ClientModEvents() {}

                @SubscribeEvent
                public static void registerLayers(EntityRenderersEvent.RegisterLayerDefinitions event) {
                    event.registerLayerDefinition(ExampleEntityModel.LAYER_LOCATION, ExampleEntityModel::createBodyLayer);
                }

                @SubscribeEvent
                public static void registerRenderers(EntityRenderersEvent.RegisterRenderers event) {
                    event.registerEntityRenderer(EntityInit.EXAMPLE_ENTITY.get(), ExampleEntityRenderer::new);
                }
            }

8. Убедитесь что:
    I.   Импортировали все классы
    II.  В string параметрах не использовали верхний регистр или пробелы
    III. При выборе методов/полей/объектов выбирали нужный.